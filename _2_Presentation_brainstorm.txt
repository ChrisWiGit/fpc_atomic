Titel
Reimplementing a 26-year old PC-Game with Lazarus
(how its done)

Motivation:
  Advantage
   - proof doable
   - Original has to much loading times
   - replace IPX with TCP/UDP
   - Support Linux and Windows
   - Write a realtime multiplayer game (y)
  Disadvantage
   - Time consuming
   - Releasable
   
Constraints:
 - as least as good as the original (multiplayer, animations, sounds, fun? ..)
 - reduced loading times between matches
 - (ai ?)
   
Research:
What to implement and what to drop
 - graphics
   \- getting them
   \- converting them
 - sounds
   \- getting them 
   \- sort and use
 - How do the game mechanics work
   \- Single player
   \- hidden features (PAC-Man opponents)
   \- Scheme files
   \- Diseases, PowerUps ..
   \- (Ai?)
   
Architecture:
Orig:
  server in client -> IPX
  
fpc-atomic:
  - Client and separate Server -> UDP, TCP
  - Event based
  - OOP, CleanCode (parts testdriven developed)

Timeline:
  Effort - 1h(weekday) .. 10h(saturday, sunday) per day

  2023.03.01 - Start with research
  2023.03.02 - Start with message documentation (PlantUML)
  2023.03.05 - Finished auto update process for beta tester
  2023.03.18 - First tech demo (All screens to enter the game, walk no collisions)
               -> game is duable lets continue
  2023.03.21 - Walk physics (collisions and grid adjusting)
  2023.03.24 - Bomb placing, damage calculations (to the map)
  2023.03.25 - Bomb explosion animations
  2023.03.26 - Spooger / Kicker / Jelly
  2023.03.27 - Die animations, first working prototype, first real testsession
               SoundFX integration
  2023.03.28 - Dualplay on one screen
  2023.03.29 - Server Statistiks, kick & zen Animation
  2023.04.01 - Locked_in Animation
  2023.04.02 - Grab Bombs, 3 new diseases, rewrite double key press detection
  2023.04.03 - Add Ai-API
  2023.04.05 - Punch Bombs, Hurry Handling -> All core functions are implemented !


Used Libraries / Tools
  External:
   - OpenGL
   - Bass
   - Lnet
   - Synapse

  CTD:
   - Mix browser 
   - Animation Editor 
 
  OwnLibs:
   - ulogger
   - uvectormath
   - uFifo
   - ugraphics
   - uopengl_graphicengine
   - uopengl_ascii_font
   - uip
   - uopengl_animations / uopengl_spriteengine
   - uChunkmanager   
   - uupdate

  Lazarus: 
   - heaptrace / FPC-range check
   
Statistics:
   Commented lines:   1719
   Source code lines: 7753
   Empty lines:        752
   Total lines:       9346
   Total files:         16
   Class count:         22 (9 derivates) 
   CC         :          ?
   
Success factors:
 - be prepared (massive research)
 - first document than implement
 - continuos working (at least daily during the first month)
 - reuse known libraries
 - [CTD] (train with "smaller" examples as part of research)
 
Legals:
 - Who is the owner 
    -> Interplay Productions 
    -> Hudson Soft 
	-> Konami Digital Entertainment
    => Konami plans to release "Super Bomberman R2" in 2023
 - Publish
    -> 6591 repository's on Github with "Bomberman" in title
	   best fit: https://github.com/HerbFargus/Atomic-Bomberman since 2016 c++
	   Lazarus: https://github.com/gatouillatpy/atominsa
	   TurboPascal: https://github.com/mrichtarsky/K-BOOM	   
 
Life Demo
